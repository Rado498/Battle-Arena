                          
						  
						  
						  
						  
						  Plan aplikacji webowej - Walka wojowników 
						   Typescript, Node, Handlebarsy, Express 
						   
						  - konfiguracjia IDE(w moim wypadku webstorma), coding assistance to node
						  - pobieranie wszystkich niezbędnich paczek, lub skopiować i doinstalować w package.json
						  
						  "devDependencies": {
    "@types/express": "^4.17.14",
    "@types/handlebars-helpers": "^0.5.3",
    "@types/method-override": "^0.0.32",
    "@types/node": "^18.11.12",
    "@types/uuid": "^9.0.0",
    "ts-node": "^10.9.1",
    "ts-node-dev": "^2.0.0",
    "typescript": "^4.9.4"
  },
  "dependencies": {
    "express": "^4.18.2",
    "express-async-errors": "^3.1.1",
    "express-handlebars": "^6.0.6",
    "method-override": "^3.0.0",
    "mysql2": "^2.3.3",
    "uuid": "^9.0.0"
  }
						  - konfiguracja typescriptu. stworzyć plik tsconfig.json. lub wkejić {
  "compilerOptions": {
    "noImplicitAny": true,
    "preserveConstEnums": true,
    "sourceMap": true,
    "target": "es6",
    "downlevelIteration": true,
    "lib": ["dom", "es6", "dom.iterable"],
    "outDir": "dist",
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "moduleResolution": "Node",
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true
  }
}
						  - konfiguracja expressa w index.ts. ręcznie, lub wkleić {
						 
						 app.use(methodOverride('_method')) 
app.use(urlencoded({
    extended: true,

}));
app.use(expressStatic('public'))
app.engine('.hbs', engine({
    extname: '.hbs',
    helpers: handlebarsHelpers
}))
app.set('view engine', '.hbs')

app.use('/', homeRouter);
app.use('/warrior', warriorRouter)
app.use('/arena', arenaRouter)
app.use('/hall-of-fame', hallOfFameRouter)
app.use(handleError)


app.listen(3000, 'localhost', () => {
    console.log('Listening on http://localhost:3000')
})
						 }
						 
						 
						 
						           Stworzyć Plik w uitils. errors.ts
								   - zaimportować klase ValidationError, zostawić ją pustą
						 
						 
						 
						 
						 
						 
						 
						            Konfiguracja routerów jakie się pojawią w aplikacji.
						 Ścieżka główna:
						 '/'
						 Rejestracja wojownika:
						  -Formularz (.get add-form)
						   -Zapisanie (.post '/')
						 Arena walk:
						  -Formularz wyboru wojownika (.get 'fight-form')
						   -Formularz walki (.post '/')
						 Hala sław:
						  - Ścieżka przenosząca do listy najlepszych wojowników (.get 'hall-of-fame')
						  
						 
						 
						 
						 
						 
						 
						             Konfiguracja widoków. Handlebars
						   - Stworzyć folder views
						     - Stworzyć folder dla widoku każdego routera
							  - Wewnątrz folderów stworzyć osobny widok dla każdej ścieżki
							   - Stworzyć widok błędów  error.hbs
							  
							  
							  
							  
							      Połączyć Routery z widokami
								  - res.render (...Ścieżka widoku)
						      
						  
						  
						  
						  
						  
						           Zaprojektować bazę danych:
								     - Nazwa bazy danych: battle_arena
									  - tabele:
									     warrior
										  - ID - uuid 
										  - Imię - varchar (65) - unikalne
										  - Siła - TINYINT max 2 liczby po przecinku
										  - Obrona - TINYINT
										  - Wytrzymałość - TINYINT 
										  - Zwinność - TINYINT 
										  - liczba zwycięstw (domyślnie 0)
										 
										 
										 
										 
										 
								--------------------------------------------------
								 Stworzyć Rekord Wojownika  
								 - klasa WarriorRecord
								  - otypować dane w klasie. public readonly 
								   - w construktorze zaimportować klase jako interface obj:WarriorRecord
								    - destrukturyzacja z obj  
									    const {id, name itd....} żeby nie musieć za każdym razem pisać obj.id obj.name itd.....
									- stworzyć zmienną sum, wpakować wszystkie statystyki do tablicy i zrobic na niej reduce
									  -zrobić walidacje na sumie - Suma wszystkich statystyk nie może wynosić więcej niż 10
									   -zrobić walidacje na name. żeby nie zawierał mniej niż 3 ani więcej niż 50 znaków
								     -Upewnić się aby zrobić ValidationError zamiast zwykłego errora, żeby wiedzieć że błąd wynika odemnie
									 
									 -jak wszystko jest ok przypisać dane do construktora
									 
									 - stworzyć metody do WarriorRecord 
									  -insert - wstawianie wojownika do bazy
									   -listAll - pobieranie wszystkich wojowników
									    - getOne - pobieranie jednego wojownika
										 - update - aktualizowanie. np nazwy
										 "Nie pisze tego z palca, skopiuję z wcześciejszego projektu, i zmodyfifuję. Może zadziała"
										  
										  -Omit w konstruktorze, aby wylkuczyć. funckje insert i update z typu klasy WarriorRecord
										    - constructor(obj: Omit<WarriorRecord, 'insert' | 'update'>)
									                                                  //Sprawdzaj na bieżąco działanie programu, stwórz sobie nowego wojownika w indexie//
                                               ?? - operator który robi taką walidacje od razu, sprawdza czy jest np.   this.id = id ?? .uuid() jak niebyło uuid to od razu je wygeneruj 		
								                  - zrobić to samo na walidacji victories
												  
									-wyciągnąć z suma tablice i stworzyć nową zmienną, która będzie samą tablica z statystykami
									 - const stats[strength.....]
									  - przypisac stats do suma 
									   -zrobic walidacje na statsach żeby żadna statystyka nie wynosiła mniej niż 1 
									    -zrobić walidacje for-of (const stat of stats) if()itd....
										
									-w metodzie listTop zwracającej topowych wojowników. w sql ORDER BY `victories` DESC LIMIT = :topCount i podać w wartości topCount
									
									
									
									
									--------------------------------------------------------------
								
									- W warrior/add-form stworzyć formularz dodawania wojownika 
									 - form adction warrior, metodą POST
									  - label dla każdej statystyki. min, max. wartość
									   - na koniec buttona typu submit 
									   -- Sprawdzić czy wszystko śmiga w przeglądarce
									   - aby sprawdzić jakie dane są przesyłane w danym fomularzu. zrobic loga na metodzie post w routerze warrior funkcją rq.body 
									     - req.body wyciąga wszytskie dane  jakie zostały przesłane
									      - aby formularz wysyłał statystyki jako number(a nie string) strength: Number(req.body.strength), itd...
									- Walidacja na name aby sprawdzać czy imię się nie powtarza 
									  - Stworzyć funkcje isNameUnique... podobna konstrukcja do getOne 
									   - Zrobić walidacje w medodzie post w routerze  
									     - coś takiego (await WarriorRecord.isNameUnique(req.body.name)
										
										
										
										
										
										----------------------------------------------------------------
										
										
										  - Stwórz obsługe błędów 
										   - w pliku errors.ts stworzyć zmienną handleError
										    - w indexie app.use(handleError) 
											 - w tym wypadku skopiować z poprzedniego projektu
											 
											 
											 
											 -------------------------------------------------------------
											 
											 -Pamiętaj o kolejności w aplikacji expresu, w index.ts
											 
											 -----------------------
											 
										     - Dodać opcje aby pod dodaniu warriora zwacało informacje. jakie imię, i pod jakim ID wojownik został dodany
											  - w widoku warrior-added dodać handlebarsowe {{name}}, {{id}}
 											   - w warrior.router przypisać id do funkcji warrior.insert
											     -w res.render dodać dodatkowe opcje id, name:warrior.name
												 
										  -------------------------------------------------------------------
											 
											- zdestruktoryzowac req.body w warriorRouter
											
											/////////////////////////////// == Rekord wojownika ukończony == \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
											
											
											- Stworzyć liste najlepszych wojowników top 10
											 - Stworzyć widok w list.hbs 
											  -  dla przykładu, już przygotowana stuktura tablicy
											 - Na funkcji get w hall-of-fame.router stworzyć zmienną warrior i wywałowac na nim wcześniej przygotowaną funkcje listTop i podać liczbe wewnątrz
											  - aby dodać indexy, trzeba zmapować całego warriora, i zwócić place: index+1, i zmapowanego warriora
											  
											 
											- Stworzyć Rekord Areny 
											 - Zaczynam od routera fight-form
											  - stworzyć zmienną warriors z klasy WarriorRecord i wywołać funkcje list.All
											   - swtorzyć widok formularzu dodania wojowników do walki 
											    - aby nie powtarzać się w fight-form stworzę patriale(kawałki pliku które można wstawiać do kodu) 
												 - do patriala warrior-select przenieść cały select
												  - funkcja wstaw partiala w hbs  {{>}}
												   - w warrior-select dodać select-name aby było widać w html który to który
												    - dodać atrybuty htmlowe na fight-form /arena/fight metodą post
													 - dodaj jakiegoś buttona submit. (ciekawy skrót. button[type="submit"])
											
											- Router fight
											  - najpierw zdestrukturyzować warrior1, warrior2 z req.body
											   - przypisać nowy identyfikator w destrukturyzacji.
											    - zrobić walidacje aby nie poddawano do walki 2 tych samych wojowników 
												 - zrobić drugą walidacje. na wypadek gdyby któś chciał wybrać wojownika którego już niema w bazie danych
												  - aby do zrobic muszę przypisać do poszczególnych warriorow funkcje getOne aby pobrać z bazy danych
											
											
											- Algorytm Walki
											 - stworzyć plik w utils.
											  - stworzyć funkcje strzałkowa typu tablica sting
											   - przypisać do leta atakującego, i broniącego się
											   - Czarna Magia.... przepisałem gotowy algorytm z kursu
											    - zamiana zmiennych let [defender, attacker] = [attacker, defender]. nie zadziała na const 
												 -
											 //TODO -- Przeanalizować 
											 
											 -Przebieg walki
											  - <ol> - lista numerowana
											   - iteracja each log. żeby wyświetlić każdego loga na stronie
											    - wewnątrz pętli li this
											 
											 
											 
											  --- 
											 
											
									   

								 
					
 
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
						  
					